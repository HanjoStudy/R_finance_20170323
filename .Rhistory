p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with ", xlab = "u", ylab = "v")
p2
p1
p2
p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with rho = 0.8 and df = 1", xlab = "u", ylab = "v")
p2
# Build a Frank, a Gumbel and a Clayton copula
frank <- frankCopula(dim = 2, param = 8)
gumbel <- gumbelCopula(dim = 3, param = 5.6)
clayton <- claytonCopula(dim = 4, param = 19)
print(frank)
# Generate random samples
fr <- rCopula(2000, frank)
gu <- rCopula(2000, gumbel)
cl <- rCopula(2000, clayton)
# Plot the samples
p1 <- qplot(fr[,1], fr[,2], colour = fr[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p2 <- qplot(gu[,1], gu[,2], colour = gu[,1], main="Gumbel copula random samples theta = 5.6", xlab = "u", ylab = "v")
p3 <- qplot(cl[,1], cl[,2], colour = cl[,1], main="Clayton copula random samples theta = 19", xlab = "u", ylab = "v")
# Define grid layout to locate plots and print each graph^(1)
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
cree <- read.csv('Data/cree_r.csv',header=F)$V2
yahoo <- read.csv('Data/yahoo_r.csv',header=F)$V2
library("kdecopula")
data("wdbc")
?wdbx
?wdbc
UV <- apply(wdbc[, c(2, 8)], 2, rank) / (nrow(wdbc) + 1)
kde.fit <- kdecop(UV)
kde.fit
plot(kde.fit)
contour(kde.fit, margins = "unif")
contour(kde.fit)
contour(kde.fit)
contour(kde.fit)
plot(kde.fit)
contour(kde.fit, margins = "unif")
contour(kde.fit)
wdbc
kde.fit
summary(kde.fit)
summary(kde.fit)
plot(kde.fit)
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
frank <- frankCopula(dim = 2, param = 3)
clayton <- claytonCopula(dim = 2, param = 1.2)
gumbel <- gumbelCopula(dim = 2, param = 1.5)
par(mfrow = c(1, 3))
# Density plot
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
persp(gumbel, dCopula, main ="Gumbel copula density")
library("kdecopula")
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
persp(gumbel, dCopula, main ="Gumbel copula density")
frank <- frankCopula(dim = 2, param = 8)
gumbel <- gumbelCopula(dim = 3, param = 5.6)
clayton <- claytonCopula(dim = 4, param = 19)
fr <- rCopula(2000, frank)
gu <- rCopula(2000, gumbel)
cl <- rCopula(2000, clayton)
p1 <- qplot(fr[,1], fr[,2], colour = fr[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p2 <- qplot(gu[,1], gu[,2], colour = gu[,1], main="Gumbel copula random samples theta = 5.6", xlab = "u", ylab = "v")
p3 <- qplot(cl[,1], cl[,2], colour = cl[,1], main="Clayton copula random samples theta = 19", xlab = "u", ylab = "v")
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
persp(gumbel, dCopula, main ="Gumbel copula density")
persp(clayton, dCopula, main ="Clayton copula density")
clayton
persp(gumbel, dCopula, main ="Gumbel copula density")
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
clayton <- claytonCopula(dim = 4, param = 19)
persp(clayton, dCopula, main ="Clayton copula density")
clayton <- claytonCopula(dim = 2, param = 1.2)
fr <- rCopula(2000, frank)
gu <- rCopula(2000, gumbel)
cl <- rCopula(2000, clayton)
# Plot the samples
p1 <- qplot(fr[,1], fr[,2], colour = fr[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p2 <- qplot(gu[,1], gu[,2], colour = gu[,1], main="Gumbel copula random samples theta = 5.6", xlab = "u", ylab = "v")
p3 <- qplot(cl[,1], cl[,2], colour = cl[,1], main="Clayton copula random samples theta = 19", xlab = "u", ylab = "v")
# Define grid layout to locate plots and print each graph^(1)
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
persp(gumbel, dCopula, main ="Gumbel copula density")
persp(frank, dCopula, main ="Frank copula density")
persp(clayton, dCopula, main ="Clayton copula density")
persp(gumbel, dCopula, main ="Gumbel copula density")
contour(frank, dCopula, xlim = c(0, 1), ylim=c(0, 1), main = "Contour plot Frank")
contour(clayton, dCopula, xlim = c(0, 1), ylim=c(0, 1), main = "Contour plot Clayton")
contour(gumbel, dCopula, xlim = c(0, 1), ylim=c(0, 1), main = "Contour plot Gumbel")
contour(frank, dCopula, xlim = c(0, 1), ylim=c(0, 1), main = "Contour plot Frank")
contour(clayton, dCopula, xlim = c(0, 1), ylim=c(0, 1), main = "Contour plot Clayton")
contour(gumbel, dCopula, xlim = c(0, 1), ylim=c(0, 1), main = "Contour plot Gumbel")
persp(gumbel, dCopula, main ="Gumbel copula density")
normal <- BiCop(family = 1, par = 0.7,, df =1)
library(VineCopula)
normal <- BiCop(family = 1, par = 0.7, df =1)
normal <- BiCop(family = 1, par = 0.7)
normal
normal <- BiCop(family = 1, par = 0.7)
# Generate a bivariate t-copula with rho = 0.8 and df = 2
stc <- BiCop(family = 2, par = 0.8, par2 = 1)
stc <- BiCop(family = 2, par =2, par2 = 1)
stc <- BiCop(family = 2, par = 0.4, par2 = 6)
stc
normal <- BiCop(family = 1, par = 0.7)
# Generate a bivariate t-copula with rho = 0.8 and df = 2
stc <- BiCop(family = 2, par = 0.4, par2 = 6)
# This fact leads to a great simplyfication when trying to model the joint behaviour complex phenomena, mainly because the marginals are easier to model than the joint distribution. Furthermore, if you had to model the joint behaviour of, say more than 20 objects (for instance the life of 20+ capacitors in an electrical component), then you would probably have a hard time by going straight into modelling the joint behaviour while the marginal distributions may be easier to estimate.
# Generate random samples
norm_d <- rCopula(2000, normal)
t_d <- rCopula(2000, stc)
library(copula)
t_d <- rCopula(2000, stc)
t_d <- rCopula(2000, stc)
# Plot the samples
pobs(normal)
stc <- BiCop(family = 2, par = 0.4, par2 = 6)
t_d <- rCopula(2000, stc)
vineCopula::dat
pob(BiCop(family = 104, par = 3, par2 = 0.5))
pobs(BiCop(family = 104, par = 3, par2 = 0.5))
u <- pobs(dat)
normal
norm_d
norm_d <- rCopula(2000, normal)
stc <- tCopula(par = 0.8, dim = 2, df = 1)
t_d <- rCopula(2000, stc)
u <- pobs(x)
u <- pobs(t_d)
plot(u)
p1 <- qplot(norm_d[,1], norm_d[,2], colour = norm_d[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p1
p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with rho = 0.8 and df = 1", xlab = "u", ylab = "v")
p2
# Copula generator
library(copula)
library(VineCopula)
# Fancy 3D plain scatterplots
library(scatterplot3d)
# ggplot2
library(ggplot2)
# Useful package to set ggplot plots one next to the other
library(grid)
set.seed(235)
stc <- tCopula(par = 0.8, dim = 2, df = 1)
# This fact leads to a great simplyfication when trying to model the joint behaviour complex phenomena, mainly because the marginals are easier to model than the joint distribution. Furthermore, if you had to model the joint behaviour of, say more than 20 objects (for instance the life of 20+ capacitors in an electrical component), then you would probably have a hard time by going straight into modelling the joint behaviour while the marginal distributions may be easier to estimate.
# Generate random samples
norm_d <- rCopula(2000, normal)
t_d <- rCopula(2000, stc)
# Plot the samples
p1 <- qplot(norm_d[,1], norm_d[,2], colour = norm_d[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p1
p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with rho = 0.8 and df = 1", xlab = "u", ylab = "v")
p2
normal <- tCopula(par = 0.8, par = 0.7)
normal <- tCopula(par = 0.8, dim =2)
# Generate a bivariate t-copula with rho = 0.8 and df = 2
stc <- tCopula(par = 0.8, dim = 2, df = 1)
# This fact leads to a great simplyfication when trying to model the joint behaviour complex phenomena, mainly because the marginals are easier to model than the joint distribution. Furthermore, if you had to model the joint behaviour of, say more than 20 objects (for instance the life of 20+ capacitors in an electrical component), then you would probably have a hard time by going straight into modelling the joint behaviour while the marginal distributions may be easier to estimate.
# Generate random samples
norm_d <- rCopula(2000, normal)
t_d <- rCopula(2000, stc)
# Plot the samples
p1 <- qplot(norm_d[,1], norm_d[,2], colour = norm_d[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p1
p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with rho = 0.8 and df = 1", xlab = "u", ylab = "v")
p2
p1
# Generate a bivariate normal copula with rho = 0.7
normal <- tCopula(par = 0.8, dim =2)
# Generate a bivariate t-copula with rho = 0.8 and df = 2
stc <- tCopula(par = 0.8, dim = 2, df = 1)
# This fact leads to a great simplyfication when trying to model the joint behaviour complex phenomena, mainly because the marginals are easier to model than the joint distribution. Furthermore, if you had to model the joint behaviour of, say more than 20 objects (for instance the life of 20+ capacitors in an electrical component), then you would probably have a hard time by going straight into modelling the joint behaviour while the marginal distributions may be easier to estimate.
# Generate random samples
norm_d <- rCopula(2000, normal)
t_d <- rCopula(2000, stc)
# Plot the samples
p1 <- qplot(norm_d[,1], norm_d[,2], colour = norm_d[,1], main="Norm with rho = 0.8", xlab = "u", ylab = "v")
p1
p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with rho = 0.8 and df = 1", xlab = "u", ylab = "v")
p2
pobs(norm_d)
BiCopKDE(pobs(norm_d)[ ,1], pobs(norm_d)[ ,2)]
BiCopKDE(pobs(norm_d)[ ,1], pobs(norm_d)[ ,2)])
BiCopKDE(pobs(norm_d)[ ,1], pobs(norm_d)[ ,2])
BiCopKDE(pobs(t_d)[ ,1], pobs(t_d)[ ,2])
contour(t_d, col = 2, add = TRUE, drawlabels = FALSE)
BiCopKDE(pobs(norm_d)[ ,1], pobs(norm_d)[ ,2])
BiCopKDE(pobs(t_d)[ ,1], pobs(t_d)[ ,2])
# Generate random samples
fr <- rCopula(2000, frank)
gu <- rCopula(2000, gumbel)
cl <- rCopula(2000, clayton)
# Plot the samples
p1 <- qplot(fr[,1], fr[,2], colour = fr[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p2 <- qplot(gu[,1], gu[,2], colour = gu[,1], main="Gumbel copula random samples theta = 5.6", xlab = "u", ylab = "v")
p3 <- qplot(cl[,1], cl[,2], colour = cl[,1], main="Clayton copula random samples theta = 19", xlab = "u", ylab = "v")
# Define grid layout to locate plots and print each graph^(1)
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
BiCopKDE(pobs(fr)[ ,1], pobs(fr)[ ,2])
BiCopKDE(pobs(gu)[ ,1], pobs(gu)[ ,2])
BiCopKDE(pobs(cl)[ ,1], pobs(cl)
frank <- frankCopula(dim = 2, param = 8)
gumbel <- gumbelCopula(dim = 3, param = 5.6)
clayton <- claytonCopula(dim = 2, param = 1.2)
# Print information on the Frank copula
print(frank)
# Generate random samples
fr <- rCopula(2000, frank)
gu <- rCopula(2000, gumbel)
cl <- rCopula(2000, clayton)
# Plot the samples
p1 <- qplot(fr[,1], fr[,2], colour = fr[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
p2 <- qplot(gu[,1], gu[,2], colour = gu[,1], main="Gumbel copula random samples theta = 5.6", xlab = "u", ylab = "v")
p3 <- qplot(cl[,1], cl[,2], colour = cl[,1], main="Clayton copula random samples theta = 19", xlab = "u", ylab = "v")
# Define grid layout to locate plots and print each graph^(1)
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
p1 <- qplot(fr[,1], fr[,2], colour = fr[,1], main="Frank copula random samples theta = 8", xlab = "u", ylab = "v")
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
frank <- frankCopula(dim = 2, param = 8)
fr <- rCopula(2000, frank)
BiCopKDE(pobs(fr)[ ,1], pobs(fr)[ ,2])
BiCopKDE(pobs(gu)[ ,1], pobs(gu)[ ,2])
BiCopKDE(pobs(cl)[ ,1], pobs(cl)
)
BiCopKDE(pobs(cl)[ ,1], pobs(cl)[ ,2])
fit1 <- BiCopEst(cl[, 1], cl[, 2], family = 3)
summary(fit1)
BiCopGofTest(u[, 1], u[, 2], fit1)
BiCopGofTest(u[, 1], u[, 2], fit1)
BiCopKDE(cl[, 1], cl[, 2])
contour(fit1, col = 2, add = TRUE, drawlabels = FALSE)
fit2 <- BiCopSelect(u[, 1], u[, 2])
contour(fit2, col = 3, add = TRUE, drawlabels = FALSE)
BiCopKDE(cl[, 1], cl[, 2])
contour(fit1, col = 2, add = TRUE, drawlabels = FALSE)
fit2 <- BiCopSelect(cl[, 1], cl[, 2])
contour(fit2, col = 3, add = TRUE, drawlabels = FALSE)
BiCopKDE(pobs(cl)[ ,1], pobs(cl)[ ,2])
fit1 <- BiCopEst(cl[, 1], cl[, 2], family = 3)
summary(fit1)
BiCopKDE(cl[, 1], cl[, 2])
contour(fit1, col = 2, add = TRUE, drawlabels = FALSE)
fit2 <- BiCopSelect(cl[, 1], cl[, 2])
contour(fit2, col = 3, add = TRUE, drawlabels = FALSE)
BiCopKDE(pobs(fr)[ ,1], pobs(fr)[ ,2])
BiCopKDE(pobs(gu)[ ,1], pobs(gu)[ ,2])
BiCopKDE(pobs(cl)[ ,1], pobs(cl)[ ,2])
BiCopKDE(pobs(cl)[ ,1], pobs(cl)[ ,2])
fit1 <- BiCopEst(cl[, 1], cl[, 2], family = 5)
summary(fit1)
BiCopKDE(cl[, 1], cl[, 2])
contour(fit1, col = 2, add = TRUE, drawlabels = FALSE)
contour(fit2, col = 3, add = TRUE, drawlabels = FALSE)
BiCopGofTest(u[, 1], u[, 2], fit1)
BiCopGofTest(u[, 1], u[, 2], fit2)
BiCopGofTest(cl[, 1], cl[, 2], fit2)
library(VineCopula)
u <- pobs(as.matrix(cbind(cree,yahoo)))[,1]
v <- pobs(as.matrix(cbind(cree,yahoo)))[,2]
cree <- read.csv('Data/cree_r.csv',header=F)$V2
yahoo <- read.csv('Data/yahoo_r.csv',header=F)$V2
library(VineCopula)
u <- pobs(as.matrix(cbind(cree,yahoo)))[,1]
v <- pobs(as.matrix(cbind(cree,yahoo)))[,2]
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
data(daxreturns)
u <- daxreturns[, 1:4]
pairs.copuladata(u)
vinefit <- RVineStructureSelect(u)
summary(vinefit)
summary(vinefit)
plot(vinefit , type = 2)
plot(vinefit , type = 1)
plot(vinefit )
contour(vinefit , type = 2)
contour(vinefit)
plot(vinefit)
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
# Copula generator
library(copula)
library(VineCopula)
# VineCopula is the shizz nizz for copula flow
# EDA > Inference > Properties
# Fancy 3D plain scatterplots
library(scatterplot3d)
# ggplot2
library(ggplot2)
# Useful package to set ggplot plots one next to the other
library(grid)
set.seed(235)
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t1 <- BiCop(2, tau = 0.5, par2 = 3) %>%
BiCopSim(10000 , .)
t2 <- BiCop(2, tau = 0.5, par2 = 5) %>%
BiCopSim(10000 , .)
t3 <- BiCop(2, tau = 0.5, par2 = 8) %>%
BiCopSim(10000 , .)
p1 <- qplot(t1[,1], t1[,2], colour = t1[,1],
main= expression(paste("Student T  where ", upsilon,"= 3")),
xlab = "u", ylab = "v")
p2 <- qplot(t2[,1], t2[,2], colour = t2[,1],
main= expression(paste("Student T  where ", upsilon,"= 5")),
xlab = "u", ylab = "v")
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 8")),
xlab = "u", ylab = "v")
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t1 <- BiCop(2, tau = 0.5, par2 = 3) %>%
BiCopSim(10000 , .)
library(magrittr)
t1 <- BiCop(2, tau = 0.5, par2 = 3) %>%
BiCopSim(10000 , .)
t2 <- BiCop(2, tau = 0.5, par2 = 5) %>%
BiCopSim(10000 , .)
t3 <- BiCop(2, tau = 0.5, par2 = 8) %>%
BiCopSim(10000 , .)
p1 <- qplot(t1[,1], t1[,2], colour = t1[,1],
main= expression(paste("Student T  where ", upsilon,"= 3")),
xlab = "u", ylab = "v")
p2 <- qplot(t2[,1], t2[,2], colour = t2[,1],
main= expression(paste("Student T  where ", upsilon,"= 5")),
xlab = "u", ylab = "v")
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 8")),
xlab = "u", ylab = "v")
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t1 <- BiCop(2, tau = 0.5, par2 = 3) %>%
BiCopSim(10000 , .)
t2 <- BiCop(2, tau = 0.5, par2 = 10) %>%
BiCopSim(10000 , .)
t3 <- BiCop(2, tau = 0.5, par2 = 20) %>%
BiCopSim(10000 , .)
p1 <- qplot(t1[,1], t1[,2], colour = t1[,1],
main= expression(paste("Student T  where ", upsilon,"= 3")),
xlab = "u", ylab = "v")
p2 <- qplot(t2[,1], t2[,2], colour = t2[,1],
main= expression(paste("Student T  where ", upsilon,"= 5")),
xlab = "u", ylab = "v")
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 8")),
xlab = "u", ylab = "v")
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t1 <- BiCop(2, tau = 0.5, par2 = 3) %>%
BiCopSim(10000 , .)
t2 <- BiCop(2, tau = 0.5, par2 = 10) %>%
BiCopSim(10000 , .)
t3 <- BiCop(2, tau = 0.5, par2 = 100) %>%
BiCopSim(10000 , .)
p1 <- qplot(t1[,1], t1[,2], colour = t1[,1],
main= expression(paste("Student T  where ", upsilon,"= 3")),
xlab = "u", ylab = "v")
p2 <- qplot(t2[,1], t2[,2], colour = t2[,1],
main= expression(paste("Student T  where ", upsilon,"= 10")),
xlab = "u", ylab = "v")
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 100")),
xlab = "u", ylab = "v")
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t3 <- BiCop(2, tau = 0.5, par2 = 100) %>%
BiCopSim(10000 , .)
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t3 <- BiCop(2, tau = 0.5, par2 = 1000) %>%
BiCopSim(10000 , .)
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 100")),
xlab = "u", ylab = "v")
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
10e5
t3 <- BiCop(2, tau = 0.5, par2 = 10e5) %>%
BiCopSim(10000 , .)
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 1000")),
xlab = "u", ylab = "v")
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
t3 <- BiCop(2, tau = 0.5, par2 = 10e7) %>%
BiCopSim(10000 , .)
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", upsilon,"= 10e7")),
xlab = "u", ylab = "v")
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
x11()
df_sample <- data.frame(x = c(
x = rnorm(10000, mean = 0, sd = 3),
y = rnorm(10000, mean = 0, sd = 10),
z = rnorm(10000, mean = 0, sd = 2),
q = rnorm(10000, mean = 1, sd = 1.5)),
g = gl(4, 10000))
ggplot(df_sample, aes(x, colour = g)) + geom_density(adjust = 5)
library(rmsfuns)
suppressPackageStartupMessages(load_pkg(c("copula", "VineCopula", "magrittr")))
suppressPackageStartupMessages(load_pkg(c("scatterplot3d", "rgl", "ggplot2", "grid")))
set.seed(235)
ggplot(df_sample, aes(x, colour = g)) + geom_density(adjust = 5)
ggplot(df_sample, aes(x, colour = g)) + stat_ecdf()
normal <- tCopula(par = 0.8, dim =2)
stc <- tCopula(par = 0.8, dim = 2, df = 1)
norm_d <- rCopula(2000, normal)
t_d <- rCopula(2000, stc)
p1 <- qplot(norm_d[,1], norm_d[,2], colour = norm_d[,1], main="Norm with rho = 0.8", xlab = "u", ylab = "v")
p1
p2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main="Student t with rho = 0.8 and df = 1", xlab = "u", ylab = "v")
p2
p1
p2
BiCopKDE(pobs(norm_d)[ ,1], pobs(norm_d)[ ,2])
BiCopKDE(pobs(t_d)[ ,1], pobs(t_d)[ ,2])
frank <- BiCop(5, tau = 0.5) %>%
BiCopSim(10000 , .)
gumbel <- BiCop(4, tau = 0.5) %>%
BiCopSim(10000 , .)
clayton <- BiCop(3, tau = 0.5) %>%
BiCopSim(10000 , .)
print(BiCop(5, tau = 0.5))
p1 <- qplot(frank[,1], frank[,2], colour = frank[,1], main="Frank copula random samples", xlab = "u", ylab = "v")
p2 <- qplot(gumbel[,1], gumbel[,2], colour = gumbel[,1], main="Gumbel copula random samples", xlab = "u", ylab = "v")
p3 <- qplot(clayton[,1], clayton[,2], colour = clayton[,1], main="Clayton copula random samples", xlab = "u", ylab = "v")
x11()
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
contour(BiCop(5, tau = 0.5))
BiCopKDE(frank[ ,1], frank[ ,2])
plot(BiCop(5, tau = 0.5),  main ="Frank copula density")
plot(BiCop(4, tau = 0.5),  main ="Gumbel copula density")
plot(BiCop(3, tau = 0.5),  main ="Clayton copula density")
t1 <- BiCop(2, tau = 0.2, par2 = 3) %>%
BiCopSim(10000 , .)
t2 <- BiCop(2, tau = 0.5, par2 = 3) %>%
BiCopSim(10000 , .)
t3 <- BiCop(2, tau = 0.8, par2 = 3) %>%
BiCopSim(10000 , .)
p1 <- qplot(t1[,1], t1[,2], colour = t1[,1],
main= expression(paste("Student T  where ", tau,"= 0.2")),
xlab = "u", ylab = "v")
p2 <- qplot(t2[,1], t2[,2], colour = t2[,1],
main= expression(paste("Student T  where ", tau,"= 0.5")),
xlab = "u", ylab = "v")
p3 <- qplot(t3[,1], t3[,2], colour = t3[,1],
main= expression(paste("Student T  where ", tau,"= 0.8")),
xlab = "u", ylab = "v")
pushViewport(viewport(layout = grid.layout(1, 3)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))
fit1 <- BiCopEst(clayton[, 1], clayton[, 2], family = 5)
summary(fit1)
plot(fit1)
BiCopKDE(clayton[, 1], clayton[, 2])
contour(fit1, col = 2, add = TRUE, drawlabels = FALSE)
fit2 <- BiCopSelect(clayton[, 1], clayton[, 2])
BiCopKDE(clayton[, 1], clayton[, 2])
contour(fit1, col = 2, add = TRUE, drawlabels = FALSE)
contour(fit2, col = 4, add = TRUE, drawlabels = FALSE)
cree <- read.csv('Data/cree_r.csv',header=F)$V2
yahoo <- read.csv('Data/yahoo_r.csv',header=F)$V2
data(daxreturns)
u <- daxreturns[, 1:4]
pairs.copuladata(u)
vinefit <- RVineStructureSelect(u)
vinefit
plot(vinefit)
contour(vinefit)
BiCopCompare(clayton[, 1], clayton[, 2])
