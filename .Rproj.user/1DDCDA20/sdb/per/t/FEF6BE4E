{
    "collab_server" : "",
    "contents" : "\n####################################################\n#                    Practical \n####################################################\n\n# Intro -------------------------------------------------------------------\n# Probability Distribution function\n\ndf_sample <- data.frame(x = c(\n  x = rnorm(10000, mean = 0, sd = 3),\n  y = rnorm(10000, mean = 0, sd = 10),\n  z = rnorm(10000, mean = 0, sd = 2),\n  q = rnorm(10000, mean = 1, sd = 1.5)),\n  g = gl(4, 10000))\n\n# Probability density function\nggplot(df_sample, aes(x, colour = g)) + geom_density(adjust = 5)\n\n# Cumulative Distribution function\nggplot(df_sample, aes(x, colour = g)) + stat_ecdf()\n\n# Copulas -----------------------------------------------------------------\n####################################################\n#   THANKS TO THOMAS NAGLER's VineCopula package  #\n####################################################\n#https://www.r-bloggers.com/how-to-fit-a-copula-model-in-r-heavily-revised-part-1-basic-tools/\n  \n###############################\n#     Fitting Copulas         #\n###############################  \n\n# Copula generator\nlibrary(copula)\nlibrary(VineCopula)\nlibrary(magrittr)\n# VineCopula is the shizz nizz for copula flow\n# EDA > Inference > Properties\n\n# Fancy 3D plain scatterplots\nlibrary(scatterplot3d)\nlibrary(rgl)\n# ggplot2\nlibrary(ggplot2)\n# Useful package to set ggplot plots one next to the other\nlibrary(grid)\nset.seed(235)\n\n#Elliptical and Archimedean copulas have nice mathematical proprieties, shape and formulas. They are a good choice for the initial warm up. Assuming you already know the parameters, this is how you would generate a bivariate normal and a t copula\n\n# Generate a bivariate normal copula with rho = 0.7\nnormal <- tCopula(par = 0.8, dim =2)\n# Generate a bivariate t-copula with rho = 0.8 and df = 2\nstc <- tCopula(par = 0.8, dim = 2, df = 1)\n\n# This fact leads to a great simplyfication when trying to model the joint behaviour complex phenomena, mainly because the marginals are easier to model than the joint distribution. Furthermore, if you had to model the joint behaviour of, say more than 20 objects (for instance the life of 20+ capacitors in an electrical component), then you would probably have a hard time by going straight into modelling the joint behaviour while the marginal distributions may be easier to estimate.\n\n# Generate random samples\nnorm_d <- rCopula(2000, normal)\nt_d <- rCopula(2000, stc)\n\n# Plot the samples\np1 <- qplot(norm_d[,1], norm_d[,2], colour = norm_d[,1], main=\"Norm with rho = 0.8\", xlab = \"u\", ylab = \"v\")\n\np1\n\np2 <- qplot(t_d[,1], t_d[,2], colour = t_d[,1], main=\"Student t with rho = 0.8 and df = 1\", xlab = \"u\", ylab = \"v\") \n\np2\n# Once the copula has been fitted, you can easily generate random numbers by using rCopula method for the single copula or rMvdc for the multivariate distribution as below\n\nBiCopKDE(pobs(norm_d)[ ,1], pobs(norm_d)[ ,2])\nBiCopKDE(pobs(t_d)[ ,1], pobs(t_d)[ ,2])\n\n# The general form \"name\" + \"Copula()\" can be used to build Archimedean copulas as well. Archimedean copulas take only a single parameter $theta$\n# Build a Frank, a Gumbel and a Clayton copula\n\nfrank <- BiCop(5, tau = 0.5) %>% \n  BiCopSim(10000 , .)\ngumbel <- BiCop(4, tau = 0.5) %>% \n  BiCopSim(10000 , .)\nclayton <- BiCop(3, tau = 0.5) %>% \n  BiCopSim(10000 , .)\n\n# Print information on the Frank copula\nprint(BiCop(5, tau = 0.5))\n\n# Plot the samples\np1 <- qplot(frank[,1], frank[,2], colour = frank[,1], main=\"Frank copula random samples\", xlab = \"u\", ylab = \"v\")\np2 <- qplot(gumbel[,1], gumbel[,2], colour = gumbel[,1], main=\"Gumbel copula random samples\", xlab = \"u\", ylab = \"v\") \np3 <- qplot(clayton[,1], clayton[,2], colour = clayton[,1], main=\"Clayton copula random samples\", xlab = \"u\", ylab = \"v\")\n\n# Define grid layout to locate plots and print each graph^(1)\nx11()\npushViewport(viewport(layout = grid.layout(1, 3)))\nprint(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\nprint(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))\n\n# Contours\ncontour(BiCop(5, tau = 0.5))\nBiCopKDE(frank[ ,1], frank[ ,2])\n\ncontour(BiCop(4, tau = 0.5))\nBiCopKDE(gumbel[ ,1], gumbel[ ,2])\n\ncontour(BiCop(3, tau = 0.5))\nBiCopKDE(clayton[ ,1],clayton[ ,2])\n\n# Density plot\nplot(BiCop(5, tau = 0.5),  main =\"Frank copula density\")\nplot(BiCop(4, tau = 0.5),  main =\"Gumbel copula density\")\nplot(BiCop(3, tau = 0.5),  main =\"Clayton copula density\")\n\n# Changes in dependence measure\nt1 <- BiCop(2, tau = 0.2, par2 = 3) %>%\n   BiCopSim(10000 , .) \n \nt2 <- BiCop(2, tau = 0.5, par2 = 3) %>%\n   BiCopSim(10000 , .) \n \nt3 <- BiCop(2, tau = 0.8, par2 = 3) %>%\n   BiCopSim(10000 , .) \n\np1 <- qplot(t1[,1], t1[,2], colour = t1[,1], \n            main= expression(paste(\"Student T  where \", tau,\"= 0.2\")),\n            xlab = \"u\", ylab = \"v\")\n\np2 <- qplot(t2[,1], t2[,2], colour = t2[,1], \n            main= expression(paste(\"Student T  where \", tau,\"= 0.5\")),\n            xlab = \"u\", ylab = \"v\")\n\np3 <- qplot(t3[,1], t3[,2], colour = t3[,1], \n            main= expression(paste(\"Student T  where \", tau,\"= 0.8\")),\n            xlab = \"u\", ylab = \"v\")\n\nx11()\npushViewport(viewport(layout = grid.layout(1, 3)))\nprint(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\nprint(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))\n\n# Changes in par2 measure\nt1 <- BiCop(2, tau = 0.5, par2 = 3) %>%\n  BiCopSim(10000 , .) \n\nt2 <- BiCop(2, tau = 0.5, par2 = 10) %>%\n  BiCopSim(10000 , .) \n\nt3 <- BiCop(2, tau = 0.5, par2 = 10e7) %>%\n  BiCopSim(10000 , .) \n\np1 <- qplot(t1[,1], t1[,2], colour = t1[,1], \n            main= expression(paste(\"Student T  where \", upsilon,\"= 3\")),\n            xlab = \"u\", ylab = \"v\")\n\np2 <- qplot(t2[,1], t2[,2], colour = t2[,1], \n            main= expression(paste(\"Student T  where \", upsilon,\"= 10\")),\n            xlab = \"u\", ylab = \"v\")\n\np3 <- qplot(t3[,1], t3[,2], colour = t3[,1], \n            main= expression(paste(\"Student T  where \", upsilon,\"= 10e7\")),\n            xlab = \"u\", ylab = \"v\")\n\nx11()\npushViewport(viewport(layout = grid.layout(1, 3)))\nprint(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\nprint(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))\n\n\n\n###############################\n#     Fitting Copulas         #\n###############################\n\n# Estimation\nfit1 <- BiCopEst(clayton[, 1], clayton[, 2], family = 5)\nsummary(fit1)\nplot(fit1)\n\n\n# White's information matrix equality (White 1982) as introduced by Huang and Prokhorov (2011)\nBiCopGofTest(clayton[, 1], clayton[, 2], fit1)\n\nBiCopKDE(clayton[, 1], clayton[, 2]) \n\ncontour(fit1, col = 2, add = TRUE, drawlabels = FALSE)\n\n\n# Best fit estimation\nfit2 <- BiCopSelect(clayton[, 1], clayton[, 2])\ncontour(fit2, col = 3, add = TRUE, drawlabels = FALSE)\n\nBiCopGofTest(clayton[, 1], clayton[, 2], fit2)\n\ncopsim <- BiCopSim(10000, BiCop(1, tau = 0.2))\n\nx <- copsim[,2] \ny <- copsim[,1] \nCDF <- BiCopCDF(copsim[,1],\n         copsim[,2], \n         BiCop(1, tau = 0.2))\nPDF <- BiCopPDF(copsim[,1], \n         copsim[,2], \n         BiCop(1, tau = 0.2))\n\nkde <- kde2d(x, y, n = 100)\n\ncol2 <- heat.colors(length(CDF))[rank(CDF)]\npersp3d(x=kde, col = 4)\nplot(BiCop(1, tau = 0.2))\n# Lets have a look\nplot3d(x, y, PDF, \n       col = 4)\n\nscatterplot3d(copsim[,1], \n              copsim[,2], \n              BiCopPDF(copsim[,1], \n                         copsim[,2], \n                         fit2), \n              color=\"red\", main=\"Density\", xlab = \"u1\", ylab=\"u2\", zlab=\"pMvdc\",pch=\".\")\nplot(fit2)\n\nplot3d(x, y, CDF, \n       col = 4)\n\nscatterplot3d(copsim[,1], \n              copsim[,2], \n              BiCopCDF(copsim[,1], \n                       copsim[,2], \n                       fit2), \n              color=\"red\", main=\"Density\", xlab = \"u1\", ylab=\"u2\", zlab=\"pMvdc\",pch=\".\")\n\n# Vine copula -------------------------------------------------------------\ncree <- read.csv('Data/cree_r.csv',header=F)$V2\nyahoo <- read.csv('Data/yahoo_r.csv',header=F)$V2\n\ndata(daxreturns)\nu <- daxreturns[, 1:4]\npairs.copuladata(u)\n\nvinefit <- RVineStructureSelect(u)\nsummary(vinefit)\n\nplot(vinefit)\n\ncontour(vinefit)\n",
    "created" : 1475770967847.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1595724331",
    "id" : "FEF6BE4E",
    "lastKnownWriteTime" : 1475765871,
    "last_content_update" : 1475765871,
    "path" : "C:/Users/Hanjo/Dropbox/Idees/Fin Metrics Klas/Class_20161007/Prac.R",
    "project_path" : "Prac.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}