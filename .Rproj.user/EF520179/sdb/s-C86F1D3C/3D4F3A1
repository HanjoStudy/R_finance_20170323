{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Prac\"\nauthor: \"Hanjo Odendaal\"\ndate: \"October 6, 2016\"\noutput: html_document\n---\n\n```{r setup}\n# Copula generator\nlibrary(rmsfuns)\nsuppressPackageStartupMessages(load_pkg(c(\"copula\", \"VineCopula\", \"magrittr\")))\nsuppressPackageStartupMessages(load_pkg(c(\"scatterplot3d\", \"rgl\", \"ggplot2\", \"grid\")))\nset.seed(235)\n```\n\n# Intro \n## Probability Distribution function\n\n```{r}\ndf_sample <- data.frame(x = c(\n  x = rnorm(10000, mean = 0, sd = 3),\n  y = rnorm(10000, mean = 0, sd = 10),\n  z = rnorm(10000, mean = 0, sd = 2),\n  q = rnorm(10000, mean = 1, sd = 1.5)),\n  g = gl(4, 10000))\nhead(df_sample)\n```\n\n```{r}\nggplot(df_sample, aes(x, colour = g)) + geom_density(adjust = 5)\n```\n\n## Cumulative Distribution function\n```{r}\nggplot(df_sample, aes(x, colour = g)) + stat_ecdf()\n```\n\n\n# Copulas \n\n* THANKS TO THOMAS NAGLER's VineCopula package\n\n* https://www.r-bloggers.com/how-to-fit-a-copula-model-in-r-heavily-revised-part-1-basic-tools/\n  \n## Simulating Copulas  \n\n* Elliptical and Archimedean copulas have nice mathematical proprieties, shape and formulas. \n* They are a good choice for the initial warm up. \n* Assuming you already know the parameters, this is how you would generate a bivariate normal and a t copula\n\n```{r}\n# Generate a bivariate normal copula with rho = 0.7\nnormal <- tCopula(par = 0.8, dim =2)\n# Generate a bivariate t-copula with rho = 0.8 and df = 2\nstc <- tCopula(par = 0.8, dim = 2, df = 1)\n\n# Generate random samples\nnorm_d <- rCopula(2000, normal)\nt_d <- rCopula(2000, stc)\n```\n\n## Simulating (cont.)\n\n* Great simplyfication when trying to model the joint behaviour complex phenomena, mainly because the marginals are easier to model than the joint distribution. Furthermore, if you had to model the joint behaviour of, say more than 20 objects (for instance the life of 20+ capacitors in an electrical component), then you would probably have a hard time by going straight into modelling the joint behaviour while the marginal distributions may be easier to estimate.\n\n```{r}\n# Plot the samples\np1 <- qplot(norm_d[,1], \n            norm_d[,2], \n            colour = norm_d[,1],\n            main=\"Norm with rho = 0.8\", \n            xlab = \"u\", \n            ylab = \"v\")\n\np1\n\np2 <- qplot(t_d[,1], \n            t_d[,2], \n            colour = t_d[,1], \n            main=\"Student t with rho = 0.8 and df = 1\", \n            xlab = \"u\", \n            ylab = \"v\") \n\np2\n\n```\n\n* Once the copula has been fitted, you can easily generate random numbers by using `rCopula` method for the single copula\n\n```{r}\n# Generate random samples\nnorm_d <- rCopula(2000, normal)\nt_d <- rCopula(2000, stc)\n```\n\n\n* The general form \"name\" + \"Copula()\" can be used to build Archimedean copulas as well. Archimedean copulas take only a single parameter $\\theta$\n\n# Copulas with the VineCopula package\n```{r}\n# Build a Frank, a Gumbel and a Clayton copula\n\nfrank <- BiCop(5, tau = 0.5) %>% \n  BiCopSim(10000 , .)\ngumbel <- BiCop(4, tau = 0.5) %>% \n  BiCopSim(10000 , .)\nclayton <- BiCop(3, tau = 0.5) %>% \n  BiCopSim(10000 , .)\n\n```\n\n\n* Print information on the Frank copula\n```{r}\nprint(BiCop(5, tau = 0.5))\n```\n\n* Plot the samples\n```{r}\np1 <- qplot(frank[,1], frank[,2], colour = frank[,1], main=\"Frank copula random samples\", xlab = \"u\", ylab = \"v\")\np2 <- qplot(gumbel[,1], gumbel[,2], colour = gumbel[,1], main=\"Gumbel copula random samples\", xlab = \"u\", ylab = \"v\") \np3 <- qplot(clayton[,1], clayton[,2], colour = clayton[,1], main=\"Clayton copula random samples\", xlab = \"u\", ylab = \"v\")\n```\n\n\n* Define grid layout to locate plots and print each graph^(1)\n```{r, fig.width=13}\npushViewport(viewport(layout = grid.layout(1, 3)))\nprint(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\nprint(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))\n```\n\n* Density plots of differing copulas\n\n```{r}\nplot(BiCop(5, tau = 0.5),  main =\"Frank copula density\")\nplot(BiCop(4, tau = 0.5),  main =\"Gumbel copula density\")\nplot(BiCop(3, tau = 0.5),  main =\"Clayton copula density\")\n\n```\n\n\n* Changes in dependence measure\n```{r, fig.width=13}\nt1 <- BiCop(2, tau = 0.2, par2 = 3) %>%\n   BiCopSim(10000 , .) \n \nt2 <- BiCop(2, tau = 0.5, par2 = 3) %>%\n   BiCopSim(10000 , .) \n \nt3 <- BiCop(2, tau = 0.8, par2 = 3) %>%\n   BiCopSim(10000 , .) \n\np1 <- qplot(t1[,1], t1[,2], colour = t1[,1], \n            main= expression(paste(\"Student T  where \", tau,\"= 0.2\")),\n            xlab = \"u\", ylab = \"v\")\n\np2 <- qplot(t2[,1], t2[,2], colour = t2[,1], \n            main= expression(paste(\"Student T  where \", tau,\"= 0.5\")),\n            xlab = \"u\", ylab = \"v\")\n\np3 <- qplot(t3[,1], t3[,2], colour = t3[,1], \n            main= expression(paste(\"Student T  where \", tau,\"= 0.8\")),\n            xlab = \"u\", ylab = \"v\")\n\npushViewport(viewport(layout = grid.layout(1, 3)))\nprint(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))\nprint(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))\nprint(p3, vp = viewport(layout.pos.row = 1, layout.pos.col = 3))\n\n```\n\n\n# Fitting Copulas        \n\n* If you know the family of the copula that you are fitting then we can just use the `BiCopEst` function to get the parameters and test the fit\n```{r}\nfit1 <- BiCopEst(clayton[, 1], clayton[, 2], family = 5)\nsummary(fit1)\nplot(fit1)\n```\n\n* In terms of testing, there are several goodness of fit tests one can use, Ill just use whites. See [goFCopula](https://cran.r-project.org/web/packages/gofCopula/index.html)\n```{r}\n# White's information matrix equality (White 1982) as introduced by Huang and Prokhorov (2011)\n#BiCopGofTest(clayton[, 1], clayton[, 2], fit1)\n\nBiCopKDE(clayton[, 1], clayton[, 2]) \n\ncontour(fit1, col = 2, add = TRUE, drawlabels = FALSE)\n\n```\n\n* If we don't know the copula type, the VineCopula package provides a function which will determine the appropriate copula and get the parameters of the fit\n\n```{r}\n# Best fit estimation\nfit2 <- BiCopSelect(clayton[, 1], clayton[, 2], familyset = c(0:5))\n\nBiCopKDE(clayton[, 1], clayton[, 2]) \ncontour(fit1, col = 2, add = TRUE, drawlabels = FALSE)\ncontour(fit2, col = 4, add = TRUE, drawlabels = FALSE)\n\n#BiCopGofTest(clayton[, 1], clayton[, 2], fit2)\n\n```\n\n# Now, lets simulate some data from our copula\n```{r}\ncopsim <- BiCopSim(10000, fit2)\n\nx <- copsim[,2]\ny <- copsim[,1]\nCDF <- BiCopCDF(copsim[,1],\n         copsim[,2],\n         BiCop(1, tau = 0.2))\n```\n\n```{r}\nPDF <- BiCopPDF(copsim[,1],\n         copsim[,2],\n         BiCop(1, tau = 0.2))\n```\n\n# Lets have a look\n```{r}\nplot(fit2)\n\n```\n\n\n# Vine copula -------------------------------------------------------------\n\n```{r}\ndata(daxreturns)\nu <- daxreturns[, 1:4]\npairs.copuladata(u)\n\nvinefit <- RVineStructureSelect(u, familyset = c(1:5))\nsummary(vinefit)\n\nplot(vinefit, tree = 1, type = 2)\nplot(vinefit, tree = 2, type = 2)\nplot(vinefit, tree = 3, type = 2)\n\ncontour(vinefit)\n\nusim <- RVineSim(1158, vinefit)\npairs(usim, pch = \".\", main = \"Simulated\")\npairs(u, pch = \".\", main = \"Actuals\")\n```\n",
    "created" : 1490203620674.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3882411365",
    "id" : "3D4F3A1",
    "lastKnownWriteTime" : 1490209623,
    "last_content_update" : 1490209623143,
    "path" : "~/t-drive/Internal/Stats_team/Presentations/R finance/20170322/Prac_out.Rmd",
    "project_path" : "Prac_out.Rmd",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}